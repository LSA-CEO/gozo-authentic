#!/bin/bash

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Variables globales
TOTAL_ERRORS=0
TOTAL_WARNINGS=0
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
REPORT_FILE="pre-build-report-$TIMESTAMP.md"

# Fonction pour afficher et logger
log() {
    echo -e "$1"
    echo -e "$1" | sed 's/\x1b\[[0-9;]*m//g' >> "$REPORT_FILE"
}

# En-t√™te du rapport
cat > "$REPORT_FILE" << EOFHEADER
# Rapport Pre-Build GozoAuthentic - $TIMESTAMP

## R√©sum√© Ex√©cutif

EOFHEADER

log "${BLUE}================================================${NC}"
log "${BLUE}    ANALYSE PRE-BUILD COMPLETE GOZOAUTHENTIC    ${NC}"
log "${BLUE}================================================${NC}"
log ""

# 1. V√©rification des variables d'environnement
log "${CYAN}1. V√©rification des variables d'environnement...${NC}"
ENV_ERRORS=0
REQUIRED_ENVS=(
    "NEXT_PUBLIC_SUPABASE_URL"
    "NEXT_PUBLIC_SUPABASE_ANON_KEY"
    "SUPABASE_SERVICE_ROLE_KEY"
    "GOOGLE_SHEETS_PRIVATE_KEY"
    "GOOGLE_SHEETS_CLIENT_EMAIL"
    "GOOGLE_SHEETS_SPREADSHEET_ID"
    "GROQ_API_KEY"
)

echo "### 1. Variables d'Environnement" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

for env in "${REQUIRED_ENVS[@]}"; do
    if [ -z "${!env}" ]; then
        log "  ${RED}‚ùå $env manquante${NC}"
        echo "- ‚ùå \`$env\` manquante" >> "$REPORT_FILE"
        ((ENV_ERRORS++))
        ((TOTAL_ERRORS++))
    else
        log "  ${GREEN}‚úì $env pr√©sente${NC}"
        echo "- ‚úÖ \`$env\` pr√©sente" >> "$REPORT_FILE"
    fi
done

if [ $ENV_ERRORS -eq 0 ]; then
    log "${GREEN}‚úÖ Toutes les variables d'environnement sont pr√©sentes${NC}"
fi
echo "" >> "$REPORT_FILE"

# 2. V√©rification des imports @/
log ""
log "${CYAN}2. V√©rification des imports @/...${NC}"
echo "### 2. Imports @/" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

AT_IMPORTS=$(grep -r "from ['\"]@/" . --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" 2>/dev/null | grep -v node_modules | grep -v .next | wc -l)

if [ $AT_IMPORTS -gt 0 ]; then
    log "  ${RED}‚ùå $AT_IMPORTS imports @/ trouv√©s (non support√©s)${NC}"
    echo "‚ùå **$AT_IMPORTS imports @/ trouv√©s** (non support√©s dans cette configuration)" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo "Fichiers concern√©s:" >> "$REPORT_FILE"
    echo "\`\`\`" >> "$REPORT_FILE"
    grep -r "from ['\"]@/" . --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" 2>/dev/null | grep -v node_modules | grep -v .next | cut -d: -f1 | sort | uniq >> "$REPORT_FILE"
    echo "\`\`\`" >> "$REPORT_FILE"
    ((TOTAL_ERRORS += AT_IMPORTS))
else
    log "  ${GREEN}‚úì Aucun import @/ trouv√©${NC}"
    echo "‚úÖ Aucun import @/ trouv√©" >> "$REPORT_FILE"
fi
echo "" >> "$REPORT_FILE"

# 3. V√©rification des imports de modules inexistants
log ""
log "${CYAN}3. V√©rification des imports de modules inexistants...${NC}"
echo "### 3. Imports de Modules Inexistants" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

IMPORT_ERRORS=0
# Patterns d'imports probl√©matiques connus
PROBLEMATIC_IMPORTS=(
    "lib/supabase/server"
    "lib/supabase/client"
    "@/components"
    "@/lib"
    "@/app"
)

for pattern in "${PROBLEMATIC_IMPORTS[@]}"; do
    COUNT=$(grep -r "$pattern" . --include="*.ts" --include="*.tsx" 2>/dev/null | grep -v node_modules | grep -v .next | wc -l)
    if [ $COUNT -gt 0 ]; then
        log "  ${RED}‚ùå $COUNT imports de '$pattern' trouv√©s${NC}"
        echo "- ‚ùå **$COUNT imports de \`$pattern\`** trouv√©s" >> "$REPORT_FILE"
        ((IMPORT_ERRORS += COUNT))
    fi
done

if [ $IMPORT_ERRORS -eq 0 ]; then
    log "  ${GREEN}‚úì Aucun import probl√©matique d√©tect√©${NC}"
    echo "‚úÖ Aucun import probl√©matique d√©tect√©" >> "$REPORT_FILE"
fi
((TOTAL_ERRORS += IMPORT_ERRORS))
echo "" >> "$REPORT_FILE"

# 4. V√©rification TypeScript
log ""
log "${CYAN}4. V√©rification TypeScript...${NC}"
echo "### 4. Erreurs TypeScript" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

npx tsc --noEmit --pretty false 2>&1 | tee tsc-output.tmp | head -20
TSC_EXIT_CODE=${PIPESTATUS[0]}
TSC_ERRORS=$(grep -c "error TS" tsc-output.tmp 2>/dev/null || echo 0)

if [ $TSC_EXIT_CODE -ne 0 ]; then
    log "  ${RED}‚ùå $TSC_ERRORS erreurs TypeScript trouv√©es${NC}"
    echo "‚ùå **$TSC_ERRORS erreurs TypeScript** trouv√©es" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo "Premi√®res erreurs:" >> "$REPORT_FILE"
    echo "\`\`\`typescript" >> "$REPORT_FILE"
    head -10 tsc-output.tmp >> "$REPORT_FILE"
    echo "\`\`\`" >> "$REPORT_FILE"
    ((TOTAL_ERRORS += TSC_ERRORS))
else
    log "  ${GREEN}‚úì Aucune erreur TypeScript${NC}"
    echo "‚úÖ Aucune erreur TypeScript" >> "$REPORT_FILE"
fi
rm -f tsc-output.tmp
echo "" >> "$REPORT_FILE"

# 5. V√©rification ESLint
log ""
log "${CYAN}5. V√©rification ESLint...${NC}"
echo "### 5. Erreurs ESLint" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

npx eslint . --ext .ts,.tsx,.js,.jsx --format unix 2>&1 | tee eslint-output.tmp | head -20
ESLINT_ERRORS=$(grep -c "error" eslint-output.tmp 2>/dev/null || echo 0)
ESLINT_WARNINGS=$(grep -c "warning" eslint-output.tmp 2>/dev/null || echo 0)

log "  ${YELLOW}‚ö†Ô∏è  $ESLINT_WARNINGS warnings ESLint${NC}"
log "  ${RED}‚ùå $ESLINT_ERRORS erreurs ESLint${NC}"
echo "- ‚ö†Ô∏è  **$ESLINT_WARNINGS warnings** ESLint" >> "$REPORT_FILE"
echo "- ‚ùå **$ESLINT_ERRORS erreurs** ESLint" >> "$REPORT_FILE"

((TOTAL_ERRORS += ESLINT_ERRORS))
((TOTAL_WARNINGS += ESLINT_WARNINGS))
rm -f eslint-output.tmp
echo "" >> "$REPORT_FILE"

# 6. V√©rification des d√©pendances
log ""
log "${CYAN}6. V√©rification des d√©pendances...${NC}"
echo "### 6. D√©pendances" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# V√©rifier package-lock.json
if [ ! -f "package-lock.json" ]; then
    log "  ${YELLOW}‚ö†Ô∏è  package-lock.json manquant${NC}"
    echo "‚ö†Ô∏è  \`package-lock.json\` manquant" >> "$REPORT_FILE"
    ((TOTAL_WARNINGS++))
fi

# V√©rifier les d√©pendances manquantes
npm ls --depth=0 2>&1 | grep "UNMET" > unmet-deps.tmp
UNMET_COUNT=$(wc -l < unmet-deps.tmp)

if [ $UNMET_COUNT -gt 0 ]; then
    log "  ${RED}‚ùå $UNMET_COUNT d√©pendances non satisfaites${NC}"
    echo "‚ùå **$UNMET_COUNT d√©pendances non satisfaites**" >> "$REPORT_FILE"
    ((TOTAL_ERRORS += UNMET_COUNT))
else
    log "  ${GREEN}‚úì Toutes les d√©pendances sont install√©es${NC}"
    echo "‚úÖ Toutes les d√©pendances sont install√©es" >> "$REPORT_FILE"
fi
rm -f unmet-deps.tmp
echo "" >> "$REPORT_FILE"

# 7. V√©rification des fichiers critiques
log ""
log "${CYAN}7. V√©rification des fichiers critiques...${NC}"
echo "### 7. Fichiers Critiques" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

CRITICAL_FILES=(
    "next.config.js"
    "tsconfig.json"
    "tailwind.config.js"
    "middleware.ts"
    "i18n/request.ts"
)

MISSING_FILES=0
for file in "${CRITICAL_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        log "  ${RED}‚ùå $file manquant${NC}"
        echo "- ‚ùå \`$file\` manquant" >> "$REPORT_FILE"
        ((MISSING_FILES++))
        ((TOTAL_ERRORS++))
    else
        log "  ${GREEN}‚úì $file pr√©sent${NC}"
        echo "- ‚úÖ \`$file\` pr√©sent" >> "$REPORT_FILE"
    fi
done
echo "" >> "$REPORT_FILE"

# 8. Analyse des erreurs potentielles de build Next.js
log ""
log "${CYAN}8. Analyse des patterns d'erreurs Next.js 15...${NC}"
echo "### 8. Patterns d'Erreurs Next.js 15" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# V√©rifier les params asynchrones dans les pages dynamiques
ASYNC_PARAMS=$(grep -r "params:" app --include="*.tsx" | grep -v "Promise<" | grep "\[.*\]" | wc -l)
if [ $ASYNC_PARAMS -gt 0 ]; then
    log "  ${YELLOW}‚ö†Ô∏è  $ASYNC_PARAMS pages dynamiques sans params asynchrones (Next.js 15)${NC}"
    echo "‚ö†Ô∏è  **$ASYNC_PARAMS pages dynamiques** pourraient n√©cessiter des params asynchrones" >> "$REPORT_FILE"
    ((TOTAL_WARNINGS += ASYNC_PARAMS))
fi

# 9. R√©sum√© final
log ""
log "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
log "${PURPLE}                R√âSUM√â FINAL                    ${NC}"
log "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
log ""

echo "## R√©sum√© Final" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "- üî¥ **Erreurs totales**: $TOTAL_ERRORS" >> "$REPORT_FILE"
echo "- üü° **Warnings totaux**: $TOTAL_WARNINGS" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

if [ $TOTAL_ERRORS -eq 0 ]; then
    log "${GREEN}‚úÖ AUCUNE ERREUR CRITIQUE D√âTECT√âE !${NC}"
    log "${GREEN}   Le build devrait r√©ussir.${NC}"
    echo "‚úÖ **AUCUNE ERREUR CRITIQUE D√âTECT√âE !**" >> "$REPORT_FILE"
    echo "Le build devrait r√©ussir." >> "$REPORT_FILE"
else
    log "${RED}‚ùå $TOTAL_ERRORS ERREURS CRITIQUES D√âTECT√âES !${NC}"
    log "${RED}   Le build va probablement √©chouer.${NC}"
    echo "‚ùå **$TOTAL_ERRORS ERREURS CRITIQUES D√âTECT√âES !**" >> "$REPORT_FILE"
    echo "Le build va probablement √©chouer." >> "$REPORT_FILE"
fi

if [ $TOTAL_WARNINGS -gt 0 ]; then
    log "${YELLOW}‚ö†Ô∏è  $TOTAL_WARNINGS warnings √† consid√©rer${NC}"
fi

log ""
log "${CYAN}üìã Rapport complet sauvegard√© dans: ${BLUE}$REPORT_FILE${NC}"
log ""
log "${CYAN}üöÄ Pour lancer le build: ${BLUE}npm run build${NC}"
log "${CYAN}üîß Pour ignorer ESLint: ${BLUE}DISABLE_ESLINT_PLUGIN=true npm run build${NC}"

# Ouvrir le rapport si possible
if command -v code &> /dev/null; then
    code "$REPORT_FILE"
elif command -v open &> /dev/null; then
    open "$REPORT_FILE"
fi

# Code de sortie bas√© sur les erreurs
exit $TOTAL_ERRORS

